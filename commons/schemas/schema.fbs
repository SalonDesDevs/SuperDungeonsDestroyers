namespace SDD.Common;
    enum LevelEnvironment: uint8 {
        Bottom,
        Cave,
        Top,
        CollisionsTester
    }

    // table Level {
    //     kind: LevelKind;
    // }

    struct Location {
        level: uint8;
        x: uint8;
        y: uint8;
    }

    enum Direction: uint8 {
        Right,
        Left,
        Down,
        Up
    }

    table Player {
        name: string;
        location: Location;
    }
    union EntityKind {
        Player,
    }

    table Entity {
        entity_id: uint64;
        kind: EntityKind;
    }

namespace SDD.Client;

    table Move {
        direction: SDD.Common.Direction;
    }

    union EventUnion {
        Move
    }

    table Event {
        event: EventUnion;
    }

    table Events {
        events: [Event] (required);
    }

    root_type Events;

namespace SDD.Server;
    table Welcome {
        me: SDD.Common.Entity (required);
    }

    table Join {
        player: SDD.Common.Entity (required);
    }

    table Leave {
        player: SDD.Common.Entity (required);
    }

    table EntityMove {
        entity_id: uint64;
        location: SDD.Common.Location;
    }

    table ZoneInfo {
        level: uint8;
        environment: SDD.Common.LevelEnvironment;
        entities: [SDD.Common.Entity];
    }

    union EventUnion {
        /// When you're successfully connected.
        Welcome,

        /// When someone join the game.
        Join,

        /// When someone leave the game.
        Leave,

        /// When a entity move.
        EntityMove,

        /// When an entity was created.
        EntityCreate: SDD.Common.Entity,

        /// When you enter a new area.
        ZoneInfo
    }

    table Event {
        event: EventUnion;
    }

    table Events {
        events: [Event] (required);
    }

    root_type Events;

namespace SDD.Mob;

    struct Vec3 {
        x: float;
        y: float;
        orientation: int;
    }
    table Mob {
        location: Vec3;
        hp: short;
        name: string;
        state: byte;
    }

    root_type Mob;

namespace SDD.Pickable;

    struct Vec2 {
        x: float;
        y: float;
    }

    table Pickable {
        id: short;
        name: string;
        pos: Vec2(required);
        durability: int;
        damage: int;
        critical_rate: short;
        combo: int;
    }

    root_type Pickable;

namespace SDD.Dungeon;

    union Content { SDD.Mob.Mob, SDD.Pickable.Pickable }

    table Room {
        content: Content;
    }

    table Dungeon {
        rooms: [Room] (required);
    }

    root_type Dungeon;

namespace SDD.Tiled;

    table TileLayer {
        tiles: [ushort];
    }

    table Map {
        width: ushort;
        height: ushort;
        layers: [TileLayer];
    }
