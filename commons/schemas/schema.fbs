namespace SDD.Common;
    enum LevelKind: uint8 {
        Bottom,
        Cave,
        Top
    }

    table Level {
        kind: LevelKind;
    }

    struct Location {
        level: uint8;
        x: uint8;
        y: uint8;
    }

    enum Direction: uint8 {
        Right,
        Left,
        Down,
        Up
    }

    table Player {
        name: string;
        location: Location;
    }
    union EntityKind {
        Player,
    }
    
    table Entity {
        entity_id: uint64;
        kind: EntityKind;
    }

namespace SDD.Client;

    table Ping {
        value: byte;
    }

    table Move {
        direction: SDD.Common.Direction;
    }

    union Content {
        Ping,
        Move
    }

    table Message {
        content: Content;
    }

    table Messages {
        messages: [Message] (required);
    }

    root_type Messages;

namespace SDD.Server;

    table Pong {
        value: byte;
    }

    table Environment {
        level: SDD.Common.Level;
        entities: [SDD.Common.Entity];
    }

    union Content {
        Pong,
        Environment
    }

    table Message {
        content: Content;
    }

    table Messages {
        messages: [Message] (required);
    }

    root_type Messages;

namespace SDD.Mob;

    struct Vec3 {
        x: float;
        y: float;
        orientation: int;
    }
    table Mob {
        location: Vec3;
        hp: short;
        name: string;
        state: byte;
    }

    root_type Mob;

namespace SDD.Pickable;

    struct Vec2 {
        x: float;
        y: float;
    }

    table Pickable {
        id: short;
        name: string;
        pos: Vec2(required);
        durability: int;
        damage: int;
        critical_rate: short;
        combo: int;
    }

    root_type Pickable;

namespace SDD.Dungeon;

    union Content { SDD.Mob.Mob, SDD.Pickable.Pickable }

    table Room {
        content: Content;
    }

    table Dungeon {
        rooms: [Room] (required);
    }

    root_type Dungeon;

namespace SDD.Tiled;

    table TileLayer {
        tiles: [ushort];
    }

    table Map {
        width: ushort;
        height: ushort;
        layers: [TileLayer];
    }