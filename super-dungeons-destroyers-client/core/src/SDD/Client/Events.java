// automatically generated by the FlatBuffers compiler, do not modify

package SDD.Client;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Events extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static Events getRootAsEvents(ByteBuffer _bb) { return getRootAsEvents(_bb, new Events()); }
  public static Events getRootAsEvents(ByteBuffer _bb, Events obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Events __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SDD.Client.Event events(int j) { return events(new SDD.Client.Event(), j); }
  public SDD.Client.Event events(SDD.Client.Event obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int eventsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createEvents(FlatBufferBuilder builder,
      int eventsOffset) {
    builder.startTable(1);
    Events.addEvents(builder, eventsOffset);
    return Events.endEvents(builder);
  }

  public static void startEvents(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addEvents(FlatBufferBuilder builder, int eventsOffset) { builder.addOffset(0, eventsOffset, 0); }
  public static int createEventsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEventsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEvents(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // events
    return o;
  }
}

